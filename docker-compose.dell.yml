version: '3.8'

# Docker Compose for Dell Laptop (RTX 4050, 16GB RAM) 
# Services: Embedding Service, Knowledge Graph Service, Milvus Vector Database v2.6.2
# Using exact Milvus standalone setup from official documentation

services:
  # Milvus etcd for metadata storage
  milvus-etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: milvus-etcd
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ./volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Milvus MinIO for object storage
  milvus-minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: milvus-minio
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9000:9000"
      - "9090:9090"  # MinIO Console (updated from 9001 to match docs)
    volumes:
      - ./volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9090"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Milvus standalone - main vector database
  milvus-standalone:
    image: milvusdb/milvus:v2.6.2
    container_name: milvus-standalone
    ports:
      - "19530:19530"  # Milvus gRPC port
      - "9091:9091"    # Milvus management port
    volumes:
      - ./volumes/milvus:/milvus/data
    environment:
      - ETCD_ENDPOINTS=milvus-etcd:2379
      - MINIO_ADDRESS=milvus-minio:9000
      - MINIO_ACCESS_KEY_ID=minioadmin
      - MINIO_SECRET_ACCESS_KEY=minioadmin
    depends_on:
      - milvus-etcd
      - milvus-minio
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 90s


  # Embedding service using EmbeddingGemma-300M (GPU-powered)
  embedding_service:
    build:
      context: ./gpu_services/embedding_service
      dockerfile: Dockerfile.gpu
    container_name: embedding_service
    ports:
      - "8002:8002"
    volumes:
      - hf_cache:/root/.cache/huggingface
      - embedding_logs:/app/logs
    environment:
      - MODEL_NAME=google/embeddinggemma-300m
      - DEVICE=cuda
      - TORCH_DTYPE=bfloat16
      - EMBEDDING_DIMENSION=768
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  # Knowledge Graph service (connects to remote LLM and local Neo4j)
  knowledge_graph_service:
    build:
      context: ./gpu_services/knowledge_graph_service
      dockerfile: Dockerfile
    container_name: knowledge_graph_service
    ports:
      - "8003:8003"
    env_file:
      - ./gpu_services/knowledge_graph_service/.env
    environment:
      # Point to remote services
      - LOCAL_LLM_URL=http://192.168.100.43:8001/v1  # Lenovo laptop
      - NEO4J_URI=bolt://192.168.100.41:7687         # Mac Mini Neo4j Desktop
      - EMBEDDING_SERVICE_URL=http://localhost:8002/embed-documents  # Local
    depends_on:
      - embedding_service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  # Milvus data volumes (matching official documentation)
  # Note: Using ./volumes/ prefix to store in local directory as per Milvus docs
  hf_cache:
  embedding_logs:

networks:
  default:
    name: vector_network
    external: false